// Code generated by MockGen. DO NOT EDIT.
// Source: dal/player/dal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	player "github.com/byyjoww/leaderboard/dal/player"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPlayerDAL is a mock of PlayerDAL interface.
type MockPlayerDAL struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerDALMockRecorder
}

// MockPlayerDALMockRecorder is the mock recorder for MockPlayerDAL.
type MockPlayerDALMockRecorder struct {
	mock *MockPlayerDAL
}

// NewMockPlayerDAL creates a new mock instance.
func NewMockPlayerDAL(ctrl *gomock.Controller) *MockPlayerDAL {
	mock := &MockPlayerDAL{ctrl: ctrl}
	mock.recorder = &MockPlayerDALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerDAL) EXPECT() *MockPlayerDALMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlayerDAL) Create(player *player.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPlayerDALMockRecorder) Create(player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlayerDAL)(nil).Create), player)
}

// Delete mocks base method.
func (m *MockPlayerDAL) Delete(player *player.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlayerDALMockRecorder) Delete(player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlayerDAL)(nil).Delete), player)
}

// GetByPK mocks base method.
func (m *MockPlayerDAL) GetByPK(id uuid.UUID) (*player.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPK", id)
	ret0, _ := ret[0].(*player.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPK indicates an expected call of GetByPK.
func (mr *MockPlayerDALMockRecorder) GetByPK(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPK", reflect.TypeOf((*MockPlayerDAL)(nil).GetByPK), id)
}

// List mocks base method.
func (m *MockPlayerDAL) List(leaderboardId uuid.UUID, limit, offset int) ([]*player.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", leaderboardId, limit, offset)
	ret0, _ := ret[0].([]*player.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPlayerDALMockRecorder) List(leaderboardId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlayerDAL)(nil).List), leaderboardId, limit, offset)
}

// UpdateScore mocks base method.
func (m *MockPlayerDAL) UpdateScore(player *player.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockPlayerDALMockRecorder) UpdateScore(player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockPlayerDAL)(nil).UpdateScore), player)
}
