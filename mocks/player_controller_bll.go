// Code generated by MockGen. DO NOT EDIT.
// Source: bll/player/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	player "github.com/byyjoww/leaderboard/dal/player"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPlayerController is a mock of PlayerController interface.
type MockPlayerController struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerControllerMockRecorder
}

// MockPlayerControllerMockRecorder is the mock recorder for MockPlayerController.
type MockPlayerControllerMockRecorder struct {
	mock *MockPlayerController
}

// NewMockPlayerController creates a new mock instance.
func NewMockPlayerController(ctrl *gomock.Controller) *MockPlayerController {
	mock := &MockPlayerController{ctrl: ctrl}
	mock.recorder = &MockPlayerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerController) EXPECT() *MockPlayerControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlayerController) Create(leaderboardId uuid.UUID) (*player.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", leaderboardId)
	ret0, _ := ret[0].(*player.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlayerControllerMockRecorder) Create(leaderboardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlayerController)(nil).Create), leaderboardId)
}

// Get mocks base method.
func (m *MockPlayerController) Get(playerId uuid.UUID) (*player.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", playerId)
	ret0, _ := ret[0].(*player.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlayerControllerMockRecorder) Get(playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlayerController)(nil).Get), playerId)
}

// List mocks base method.
func (m *MockPlayerController) List(leaderboardId uuid.UUID, limit, offset int) ([]*player.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", leaderboardId, limit, offset)
	ret0, _ := ret[0].([]*player.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPlayerControllerMockRecorder) List(leaderboardId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlayerController)(nil).List), leaderboardId, limit, offset)
}

// Remove mocks base method.
func (m *MockPlayerController) Remove(playerId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", playerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPlayerControllerMockRecorder) Remove(playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPlayerController)(nil).Remove), playerId)
}

// UpdateScore mocks base method.
func (m *MockPlayerController) UpdateScore(playerId uuid.UUID, amount int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", playerId, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockPlayerControllerMockRecorder) UpdateScore(playerId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockPlayerController)(nil).UpdateScore), playerId, amount)
}
